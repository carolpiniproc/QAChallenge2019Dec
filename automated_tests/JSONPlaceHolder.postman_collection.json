{
	"info": {
		"_postman_id": "b4de8f9e-6a50-45e5-9ffd-70759a227d60",
		"name": "JSONPlaceHolder",
		"description": "Intro\nJSONPlaceholder is a free online REST API that you can use whenever you need some fake data.\nIt's great for tutorials, testing new libraries, sharing code examples, ...",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users, name and email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "42962be8-0428-4321-8b60-30930a0f4ee7",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"   const users = pm.response.json();",
							"   let valid = true",
							"   users.forEach(user => {",
							"      if(!user.name || !user.username || !user.email) {",
							"           valid = false;",
							"       }",
							"   })",
							"   pm.expect(valid).to.be.true;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				},
				"description": "GET /users\n\n1. All users must have a name, username, and email."
			},
			"response": []
		},
		{
			"name": "users/company long name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b4fdc56-1ede-424d-b973-0f2b5510960c",
						"exec": [
							"pm.test(\"company name > 50\", function () {",
							"   const users = pm.response.json();",
							"   let valid = true",
							"   users.forEach(user => {",
							"       if(user.company.name.length > 50) {",
							"           valid = false;",
							"       }",
							"   })",
							"   pm.expect(valid).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				},
				"description": "More than 50 characters"
			},
			"response": []
		},
		{
			"name": "users/company short name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f97f71c8-1d3b-48fc-bfba-b26489ab5ab3",
						"exec": [
							"pm.test(\"company name < 50\", function () {",
							"   const users = pm.response.json();",
							"   let valid = true",
							"   users.forEach(user => {",
							"       if(user.company.name.length < 50) {",
							"           valid = false;",
							"       }",
							"   })",
							"   pm.expect(valid).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				},
				"description": "3. Their Company catchphrase must have less than 50 characters."
			},
			"response": []
		},
		{
			"name": "users email is valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72a4b726-6300-464f-a3ea-81b84d5f80da",
						"exec": [
							"pm.test(\"User email is valid\", function () {",
							"   const users = pm.response.json();",
							"   let valid = true",
							"   const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;",
							"   users.forEach(user => {",
							"       if(!emailRegex.test(user.email)) {",
							"           valid = false;",
							"       }",
							"   })",
							"   pm.expect(valid).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "posts > new item and check",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b39f0241-9339-41c0-af28-4d59e0a6b9da",
						"exec": [
							"pm.test(\"Check new item\", function () {",
							"    pm.response.to.have.status(201);",
							"    let response = pm.response.json();",
							"    let userId = pm.environment.get(\"USER_ID\").toString();",
							"    pm.expect(response.userId).to.be.equal(userId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c5068561-20f4-45bc-8120-a09153ec2833",
						"exec": [
							"pm.sendRequest({",
							"   url: 'https://jsonplaceholder.typicode.com/users',",
							"   method: 'GET',",
							"}, function (err, response) {",
							"   const users = response.json();",
							"   pm.environment.set(\"USER_ID\", users[5].id);",
							"});",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"title\": \"title test\",\n \"body\": \"body\",\n \"userId\": \"{{USER_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				},
				"description": "POST /posts\n\n1. Save a new post using a userId got by \"GET /users\" API."
			},
			"response": []
		},
		{
			"name": "posts > erro",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f8fed886-5705-4e89-be77-93758ee94a94",
						"exec": [
							"pm.sendRequest({",
							"   url: 'https://jsonplaceholder.typicode.com/users',",
							"   method: 'GET',",
							"}, function (err, response) {",
							"   const users = response.json();",
							"   pm.environment.set(\"USER_ID\", users[5].id);",
							"});",
							"  "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b25ae86a-765b-4646-9443-473b44f438ae",
						"exec": [
							"pm.test(\"Check new item\", function () {",
							"    pm.response.to.have.status(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"body\": \"body\",\n \"userId\": \"{{USER_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				},
				"description": "Api nao retorna erro. \n2. When trying to save a new post without the title, API must return an error."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5582c629-462f-4101-8e73-e9ddca71a1a7",
				"type": "text/javascript",
				"exec": [
					"fetch('https://jsonplaceholder.typicode.com/todos')",
					"  .then(response => response.json())",
					"  .then(json => console.log(json))"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8a8dbdd6-998c-4ae6-9cd6-1d4e4ffad92b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}